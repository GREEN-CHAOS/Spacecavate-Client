#!/usr/bin/env python

Import("env")
Import("env_modules")

env_glslang = env_modules.Clone()

# Thirdparty source files
if env["builtin_glslang"]:
    thirdparty_dir = "#thirdparty/glslang/"
    thirdparty_sources = [
        "glslang/CInterface/glslang_c_interface.cpp",
        "glslang/MachineIndependent/RemoveTree.cpp",
        "glslang/MachineIndependent/ParseHelper.cpp",
        "glslang/MachineIndependent/iomapper.cpp",
        "glslang/MachineIndependent/propagateNoContraction.cpp",
        "glslang/MachineIndependent/Intermediate.cpp",
        "glslang/MachineIndependent/linkValidate.cpp",
        "glslang/MachineIndependent/attribute.cpp",
        "glslang/MachineIndependent/Scan.cpp",
        "glslang/MachineIndependent/Initialize.cpp",
        "glslang/MachineIndependent/Constant.cpp",
        "glslang/MachineIndependent/reflection.cpp",
        "glslang/MachineIndependent/limits.cpp",
        "glslang/MachineIndependent/preprocessor/PpScanner.cpp",
        "glslang/MachineIndependent/preprocessor/PpTokens.cpp",
        "glslang/MachineIndependent/preprocessor/PpAtom.cpp",
        "glslang/MachineIndependent/preprocessor/PpContext.cpp",
        "glslang/MachineIndependent/preprocessor/Pp.cpp",
        "glslang/MachineIndependent/InfoSink.cpp",
        "glslang/MachineIndependent/intermOut.cpp",
        "glslang/MachineIndependent/SymbolTable.cpp",
        "glslang/MachineIndependent/glslang_tab.cpp",
        "glslang/MachineIndependent/Versions.cpp",
        "glslang/MachineIndependent/ShaderLang.cpp",
        "glslang/MachineIndependent/parseConst.cpp",
        "glslang/MachineIndependent/PoolAlloc.cpp",
        "glslang/MachineIndependent/ParseContextBase.cpp",
        "glslang/MachineIndependent/IntermTraverse.cpp",
        "glslang/GenericCodeGen/Link.cpp",
        "glslang/GenericCodeGen/CodeGen.cpp",
        "OGLCompilersDLL/InitializeDll.cpp",
        "SPIRV/CInterface/spirv_c_interface.cpp",
        "SPIRV/InReadableOrder.cpp",
        "SPIRV/GlslangToSpv.cpp",
        "SPIRV/SpvBuilder.cpp",
        "SPIRV/SpvTools.cpp",
        "SPIRV/disassemble.cpp",
        "SPIRV/doc.cpp",
        "SPIRV/SPVRemapper.cpp",
        "SPIRV/SpvPostProcess.cpp",
        "SPIRV/Logger.cpp",
        "StandAlone/ResourceLimits.cpp",
    ]

    if env["platform"] == "windows":
        thirdparty_sources.append("glslang/OSDependent/Windows/ossource.cpp")
    else:
        thirdparty_sources.append("glslang/OSDependent/Unix/ossource.cpp")

    thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

    # Treat glslang headers as system headers to avoid raising warnings. Not supported on MSVC.
    if not env.msvc:
        env_glslang.Append(CPPFLAGS=["-isystem", Dir(thirdparty_dir).path])
    else:
        env_glslang.Prepend(CPPPATH=[thirdparty_dir])

    env_glslang.Append(CPPDEFINES=["ENABLE_OPT=0"])

    env_thirdparty = env_glslang.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(env.modules_sources, thirdparty_sources)

# Godot's own source files
env_glslang.add_source_files(env.modules_sources, "*.cpp")
