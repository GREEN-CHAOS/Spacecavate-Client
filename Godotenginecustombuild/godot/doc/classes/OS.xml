<?xml version="1.0" encoding="UTF-8" ?>
<class name="OS" inherits="Object" version="4.0">
	<brief_description>
		Operating System functions.
	</brief_description>
	<description>
		Operating System functions. OS wraps the most common functionality to communicate with the host operating system, such as the clipboard, video driver, date and time, timers, environment variables, execution of binaries, command line, etc.
	</description>
	<tutorials>
		<link title="OS Test Demo">https://godotengine.org/asset-library/asset/677</link>
	</tutorials>
	<methods>
		<method name="can_use_threads" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the current host platform is using multiple threads.
			</description>
		</method>
		<method name="close_midi_inputs">
			<return type="void">
			</return>
			<description>
				Shuts down system MIDI driver.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="delay_msec" qualifiers="const">
			<return type="void">
			</return>
			<argument index="0" name="msec" type="int">
			</argument>
			<description>
				Delay execution of the current thread by [code]msec[/code] milliseconds.
			</description>
		</method>
		<method name="delay_usec" qualifiers="const">
			<return type="void">
			</return>
			<argument index="0" name="usec" type="int">
			</argument>
			<description>
				Delay execution of the current thread by [code]usec[/code] microseconds.
			</description>
		</method>
		<method name="dump_memory_to_file">
			<return type="void">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Dumps the memory allocation ringlist to a file (only works in debug).
				Entry format per line: "Address - Size - Description".
			</description>
		</method>
		<method name="dump_resources_to_file">
			<return type="void">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
				Dumps all used resources to file (only works in debug).
				Entry format per line: "Resource Type : Resource Location".
				At the end of the file is a statistic of all used Resource Types.
			</description>
		</method>
		<method name="execute">
			<return type="int">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="arguments" type="PackedStringArray">
			</argument>
			<argument index="2" name="blocking" type="bool" default="true">
			</argument>
			<argument index="3" name="output" type="Array" default="[  ]">
			</argument>
			<argument index="4" name="read_stderr" type="bool" default="false">
			</argument>
			<description>
				Execute the file at the given path with the arguments passed as an array of strings. Platform path resolution will take place. The resolved file must exist and be executable.
				The arguments are used in the given order and separated by a space, so [code]OS.execute("ping", ["-w", "3", "godotengine.org"], false)[/code] will resolve to [code]ping -w 3 godotengine.org[/code] in the system's shell.
				This method has slightly different behavior based on whether the [code]blocking[/code] mode is enabled.
				If [code]blocking[/code] is [code]true[/code], the Godot thread will pause its execution while waiting for the process to terminate. The shell output of the process will be written to the [code]output[/code] array as a single string. When the process terminates, the Godot thread will resume execution.
				If [code]blocking[/code] is [code]false[/code], the Godot thread will continue while the new process runs. It is not possible to retrieve the shell output in non-blocking mode, so [code]output[/code] will be empty.
				The return value also depends on the blocking mode. When blocking, the method will return an exit code of the process. When non-blocking, the method returns a process ID, which you can use to monitor the process (and potentially terminate it with [method kill]). If the process forking (non-blocking) or opening (blocking) fails, the method will return [code]-1[/code] or another exit code.
				Example of blocking mode and retrieving the shell output:
				[codeblocks]
				[gdscript]
				var output = []
				var exit_code = OS.execute("ls", ["-l", "/tmp"], true, output)
				[/gdscript]
				[csharp]
				var output = new Godot.Collections.Array();
				int exitCode = OS.Execute("ls", new string[] {"-l", "/tmp"}, true, output);
				[/csharp]
				[/codeblocks]
				Example of non-blocking mode, running another instance of the project and storing its process ID:
				[codeblocks]
				[gdscript]
				var pid = OS.execute(OS.get_executable_path(), [], false)
				[/gdscript]
				[csharp]
				var pid = OS.Execute(OS.GetExecutablePath(), new string[] {}, false);
				[/csharp]
				[/codeblocks]
				If you wish to access a shell built-in or perform a composite command, a platform-specific shell can be invoked. For example:
				[codeblocks]
				[gdscript]
				var output = []
				OS.execute("CMD.exe", ["/C", "cd %TEMP% &amp;&amp; dir"], true, output)
				[/gdscript]
				[csharp]
				var output = new Godot.Collections.Array();
				OS.Execute("CMD.exe", new string[] {"/C", "cd %TEMP% &amp;&amp; dir"}, true, output);
				[/csharp]
				[/codeblocks]
				[b]Note:[/b] This method is implemented on Android, iOS, Linux, macOS and Windows.
			</description>
		</method>
		<method name="find_keycode_from_string" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="string" type="String">
			</argument>
			<description>
				Returns the keycode of the given string (e.g. "Escape").
			</description>
		</method>
		<method name="get_cmdline_args">
			<return type="PackedStringArray">
			</return>
			<description>
				Returns the command-line arguments passed to the engine.
				Command-line arguments can be written in any form, including both [code]--key value[/code] and [code]--key=value[/code] forms so they can be properly parsed, as long as custom command-line arguments do not conflict with engine arguments.
				You can also incorporate environment variables using the [method get_environment] method.
				You can set [code]editor/main_run_args[/code] in the Project Settings to define command-line arguments to be passed by the editor when running the project.
				Here's a minimal example on how to parse command-line arguments into a dictionary using the [code]--key=value[/code] form for arguments:
				[codeblocks]
				[gdscript]
				var arguments = {}
				for argument in OS.get_cmdline_args():
				    if argument.find("=") &gt; -1:
				        var key_value = argument.split("=")
				        arguments[key_value[0].lstrip("--")] = key_value[1]
				[/gdscript]
				[csharp]
				var arguments = new Godot.Collections.Dictionary();
				foreach (var argument in OS.GetCmdlineArgs())
				{
				    if (argument.Find("=") &gt; -1)
				    {
				        string[] keyValue = argument.Split("=");
				        arguments[keyValue[0].LStrip("--")] = keyValue[1];
				    }
				}
				[/csharp]
				[/codeblocks]
			</description>
		</method>
		<method name="get_connected_midi_inputs">
			<return type="PackedStringArray">
			</return>
			<description>
				Returns an array of MIDI device names.
				The returned array will be empty if the system MIDI driver has not previously been initialised with [method open_midi_inputs].
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="get_date" qualifiers="const">
			<return type="Dictionary">
			</return>
			<argument index="0" name="utc" type="bool" default="false">
			</argument>
			<description>
				Returns current date as a dictionary of keys: [code]year[/code], [code]month[/code], [code]day[/code], [code]weekday[/code], [code]dst[/code] (Daylight Savings Time).
			</description>
		</method>
		<method name="get_datetime" qualifiers="const">
			<return type="Dictionary">
			</return>
			<argument index="0" name="utc" type="bool" default="false">
			</argument>
			<description>
				Returns current datetime as a dictionary of keys: [code]year[/code], [code]month[/code], [code]day[/code], [code]weekday[/code], [code]dst[/code] (Daylight Savings Time), [code]hour[/code], [code]minute[/code], [code]second[/code].
			</description>
		</method>
		<method name="get_datetime_from_unix_time" qualifiers="const">
			<return type="Dictionary">
			</return>
			<argument index="0" name="unix_time_val" type="int">
			</argument>
			<description>
				Gets a dictionary of time values corresponding to the given UNIX epoch time (in seconds).
				The returned Dictionary's values will be the same as [method get_datetime], with the exception of Daylight Savings Time as it cannot be determined from the epoch.
			</description>
		</method>
		<method name="get_environment" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="environment" type="String">
			</argument>
			<description>
				Returns an environment variable.
			</description>
		</method>
		<method name="get_executable_path" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the path to the current engine executable.
			</description>
		</method>
		<method name="get_granted_permissions" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<description>
				With this function you can get the list of dangerous permissions that have been granted to the Android application.
				[b]Note:[/b] This method is implemented on Android.
			</description>
		</method>
		<method name="get_keycode_string" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="code" type="int">
			</argument>
			<description>
				Returns the given keycode as a string (e.g. Return values: [code]"Escape"[/code], [code]"Shift+Escape"[/code]).
				See also [member InputEventKey.keycode] and [method InputEventKey.get_keycode_with_modifiers].
			</description>
		</method>
		<method name="get_locale" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the host OS locale.
			</description>
		</method>
		<method name="get_model_name" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the model name of the current device.
				[b]Note:[/b] This method is implemented on Android and iOS. Returns [code]"GenericDevice"[/code] on unsupported platforms.
			</description>
		</method>
		<method name="get_name" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the name of the host OS. Possible values are: [code]"Android"[/code], [code]"iOS"[/code], [code]"HTML5"[/code], [code]"OSX"[/code], [code]"Server"[/code], [code]"Windows"[/code], [code]"UWP"[/code], [code]"X11"[/code].
			</description>
		</method>
		<method name="get_process_id" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the project's process ID.
				[b]Note:[/b] This method is implemented on Android, iOS, Linux, macOS and Windows.
			</description>
		</method>
		<method name="get_processor_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the number of threads available on the host machine.
			</description>
		</method>
		<method name="get_static_memory_peak_usage" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the maximum amount of static memory used (only works in debug).
			</description>
		</method>
		<method name="get_static_memory_usage" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the amount of static memory being used by the program in bytes.
			</description>
		</method>
		<method name="get_system_dir" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="dir" type="int" enum="OS.SystemDir">
			</argument>
			<description>
				Returns the actual path to commonly used folders across different platforms. Available locations are specified in [enum SystemDir].
				[b]Note:[/b] This method is implemented on Android, Linux, macOS and Windows.
			</description>
		</method>
		<method name="get_tablet_driver_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the total number of available tablet drivers.
				[b]Note:[/b] This method is implemented on Windows.
			</description>
		</method>
		<method name="get_tablet_driver_name" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
				Returns the tablet driver name for the given index.
				[b]Note:[/b] This method is implemented on Windows.
			</description>
		</method>
		<method name="get_ticks_msec" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the amount of time passed in milliseconds since the engine started.
			</description>
		</method>
		<method name="get_ticks_usec" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the amount of time passed in microseconds since the engine started.
			</description>
		</method>
		<method name="get_time" qualifiers="const">
			<return type="Dictionary">
			</return>
			<argument index="0" name="utc" type="bool" default="false">
			</argument>
			<description>
				Returns current time as a dictionary of keys: hour, minute, second.
			</description>
		</method>
		<method name="get_time_zone_info" qualifiers="const">
			<return type="Dictionary">
			</return>
			<description>
				Returns the current time zone as a dictionary with the keys: bias and name.
			</description>
		</method>
		<method name="get_unique_id" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns a string that is unique to the device.
				[b]Note:[/b] Returns an empty string on HTML5 and UWP, as this method isn't implemented on those platforms yet.
			</description>
		</method>
		<method name="get_unix_time" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the current UNIX epoch timestamp.
			</description>
		</method>
		<method name="get_unix_time_from_datetime" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="datetime" type="Dictionary">
			</argument>
			<description>
				Gets an epoch time value from a dictionary of time values.
				[code]datetime[/code] must be populated with the following keys: [code]year[/code], [code]month[/code], [code]day[/code], [code]hour[/code], [code]minute[/code], [code]second[/code].
				You can pass the output from [method get_datetime_from_unix_time] directly into this function. Daylight Savings Time ([code]dst[/code]), if present, is ignored.
			</description>
		</method>
		<method name="get_user_data_dir" qualifiers="const">
			<return type="String">
			</return>
			<description>
				Returns the absolute directory path where user data is written ([code]user://[/code]).
				On Linux, this is [code]~/.local/share/godot/app_userdata/[project_name][/code], or [code]~/.local/share/[custom_name][/code] if [code]use_custom_user_dir[/code] is set.
				On macOS, this is [code]~/Library/Application Support/Godot/app_userdata/[project_name][/code], or [code]~/Library/Application Support/[custom_name][/code] if [code]use_custom_user_dir[/code] is set.
				On Windows, this is [code]%APPDATA%\Godot\app_userdata\[project_name][/code], or [code]%APPDATA%\[custom_name][/code] if [code]use_custom_user_dir[/code] is set. [code]%APPDATA%[/code] expands to [code]%USERPROFILE%\AppData\Roaming[/code].
				If the project name is empty, [code]user://[/code] falls back to [code]res://[/code].
			</description>
		</method>
		<method name="has_environment" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="environment" type="String">
			</argument>
			<description>
				Returns [code]true[/code] if an environment variable exists.
			</description>
		</method>
		<method name="has_feature" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="tag_name" type="String">
			</argument>
			<description>
				Returns [code]true[/code] if the feature for the given feature tag is supported in the currently running instance, depending on platform, build etc. Can be used to check whether you're currently running a debug build, on a certain platform or arch, etc. Refer to the [url=https://docs.godotengine.org/en/latest/getting_started/workflow/export/feature_tags.html]Feature Tags[/url] documentation for more details.
				[b]Note:[/b] Tag names are case-sensitive.
			</description>
		</method>
		<method name="is_debug_build" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the Godot binary used to run the project is a [i]debug[/i] export template, or when running in the editor.
				Returns [code]false[/code] if the Godot binary used to run the project is a [i]release[/i] export template.
				To check whether the Godot binary used to run the project is an export template (debug or release), use [code]OS.has_feature("standalone")[/code] instead.
			</description>
		</method>
		<method name="is_keycode_unicode" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="code" type="int">
			</argument>
			<description>
				Returns [code]true[/code] if the input keycode corresponds to a Unicode character.
			</description>
		</method>
		<method name="is_stdout_verbose" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the engine was executed with [code]-v[/code] (verbose stdout).
			</description>
		</method>
		<method name="is_userfs_persistent" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				If [code]true[/code], the [code]user://[/code] file system is persistent, so that its state is the same after a player quits and starts the game again. Relevant to the HTML5 platform, where this persistence may be unavailable.
			</description>
		</method>
		<method name="kill">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="pid" type="int">
			</argument>
			<description>
				Kill (terminate) the process identified by the given process ID ([code]pid[/code]), e.g. the one returned by [method execute] in non-blocking mode.
				[b]Note:[/b] This method can also be used to kill processes that were not spawned by the game.
				[b]Note:[/b] This method is implemented on Android, iOS, Linux, macOS and Windows.
			</description>
		</method>
		<method name="open_midi_inputs">
			<return type="void">
			</return>
			<description>
				Initialises the singleton for the system MIDI driver.
				[b]Note:[/b] This method is implemented on Linux, macOS and Windows.
			</description>
		</method>
		<method name="print_all_resources">
			<return type="void">
			</return>
			<argument index="0" name="tofile" type="String" default="&quot;&quot;">
			</argument>
			<description>
				Shows all resources in the game. Optionally, the list can be written to a file by specifying a file path in [code]tofile[/code].
			</description>
		</method>
		<method name="print_all_textures_by_size">
			<return type="void">
			</return>
			<description>
				Shows the list of loaded textures sorted by size in memory.
			</description>
		</method>
		<method name="print_resources_by_type">
			<return type="void">
			</return>
			<argument index="0" name="types" type="PackedStringArray">
			</argument>
			<description>
				Shows the number of resources loaded by the game of the given types.
			</description>
		</method>
		<method name="print_resources_in_use">
			<return type="void">
			</return>
			<argument index="0" name="short" type="bool" default="false">
			</argument>
			<description>
				Shows all resources currently used by the game.
			</description>
		</method>
		<method name="request_permission">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				At the moment this function is only used by [code]AudioDriverOpenSL[/code] to request permission for [code]RECORD_AUDIO[/code] on Android.
			</description>
		</method>
		<method name="request_permissions">
			<return type="bool">
			</return>
			<description>
				With this function you can request dangerous permissions since normal permissions are automatically granted at install time in Android application.
				[b]Note:[/b] This method is implemented on Android.
			</description>
		</method>
		<method name="set_thread_name">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
				Sets the name of the current thread.
			</description>
		</method>
		<method name="set_use_file_access_save_and_swap">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
				Enables backup saves if [code]enabled[/code] is [code]true[/code].
			</description>
		</method>
		<method name="shell_open">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="uri" type="String">
			</argument>
			<description>
				Requests the OS to open a resource with the most appropriate program. For example:
				- [code]OS.shell_open("C:\\Users\name\Downloads")[/code] on Windows opens the file explorer at the user's Downloads folder.
				- [code]OS.shell_open("https://godotengine.org")[/code] opens the default web browser on the official Godot website.
				- [code]OS.shell_open("mailto:example@example.com")[/code] opens the default email client with the "To" field set to [code]example@example.com[/code]. See [url=https://blog.escapecreative.com/customizing-mailto-links/]Customizing [code]mailto:[/code] Links[/url] for a list of fields that can be added.
				Use [method ProjectSettings.globalize_path] to convert a [code]res://[/code] or [code]user://[/code] path into a system path for use with this method.
				[b]Note:[/b] This method is implemented on Android, iOS, HTML5, Linux, macOS and Windows.
			</description>
		</method>
	</methods>
	<members>
		<member name="exit_code" type="int" setter="set_exit_code" getter="get_exit_code" default="0">
			The exit code passed to the OS when the main loop exits. By convention, an exit code of [code]0[/code] indicates success whereas a non-zero exit code indicates an error. For portability reasons, the exit code should be set between 0 and 125 (inclusive).
			[b]Note:[/b] This value will be ignored if using [method SceneTree.quit] with an [code]exit_code[/code] argument passed.
		</member>
		<member name="low_processor_usage_mode" type="bool" setter="set_low_processor_usage_mode" getter="is_in_low_processor_usage_mode" default="false">
			If [code]true[/code], the engine optimizes for low processor usage by only refreshing the screen if needed. Can improve battery consumption on mobile.
		</member>
		<member name="low_processor_usage_mode_sleep_usec" type="int" setter="set_low_processor_usage_mode_sleep_usec" getter="get_low_processor_usage_mode_sleep_usec" default="6900">
			The amount of sleeping between frames when the low-processor usage mode is enabled (in microseconds). Higher values will result in lower CPU usage.
		</member>
		<member name="tablet_driver" type="String" setter="set_current_tablet_driver" getter="get_current_tablet_driver" default="&quot;&quot;">
			The current tablet driver in use.
		</member>
	</members>
	<constants>
		<constant name="VIDEO_DRIVER_GLES2" value="0" enum="VideoDriver">
			The GLES2 rendering backend. It uses OpenGL ES 2.0 on mobile devices, OpenGL 2.1 on desktop platforms and WebGL 1.0 on the web.
		</constant>
		<constant name="VIDEO_DRIVER_VULKAN" value="1" enum="VideoDriver">
			The Vulkan rendering backend.
		</constant>
		<constant name="DAY_SUNDAY" value="0" enum="Weekday">
			Sunday.
		</constant>
		<constant name="DAY_MONDAY" value="1" enum="Weekday">
			Monday.
		</constant>
		<constant name="DAY_TUESDAY" value="2" enum="Weekday">
			Tuesday.
		</constant>
		<constant name="DAY_WEDNESDAY" value="3" enum="Weekday">
			Wednesday.
		</constant>
		<constant name="DAY_THURSDAY" value="4" enum="Weekday">
			Thursday.
		</constant>
		<constant name="DAY_FRIDAY" value="5" enum="Weekday">
			Friday.
		</constant>
		<constant name="DAY_SATURDAY" value="6" enum="Weekday">
			Saturday.
		</constant>
		<constant name="MONTH_JANUARY" value="1" enum="Month">
			January.
		</constant>
		<constant name="MONTH_FEBRUARY" value="2" enum="Month">
			February.
		</constant>
		<constant name="MONTH_MARCH" value="3" enum="Month">
			March.
		</constant>
		<constant name="MONTH_APRIL" value="4" enum="Month">
			April.
		</constant>
		<constant name="MONTH_MAY" value="5" enum="Month">
			May.
		</constant>
		<constant name="MONTH_JUNE" value="6" enum="Month">
			June.
		</constant>
		<constant name="MONTH_JULY" value="7" enum="Month">
			July.
		</constant>
		<constant name="MONTH_AUGUST" value="8" enum="Month">
			August.
		</constant>
		<constant name="MONTH_SEPTEMBER" value="9" enum="Month">
			September.
		</constant>
		<constant name="MONTH_OCTOBER" value="10" enum="Month">
			October.
		</constant>
		<constant name="MONTH_NOVEMBER" value="11" enum="Month">
			November.
		</constant>
		<constant name="MONTH_DECEMBER" value="12" enum="Month">
			December.
		</constant>
		<constant name="SYSTEM_DIR_DESKTOP" value="0" enum="SystemDir">
			Desktop directory path.
		</constant>
		<constant name="SYSTEM_DIR_DCIM" value="1" enum="SystemDir">
			DCIM (Digital Camera Images) directory path.
		</constant>
		<constant name="SYSTEM_DIR_DOCUMENTS" value="2" enum="SystemDir">
			Documents directory path.
		</constant>
		<constant name="SYSTEM_DIR_DOWNLOADS" value="3" enum="SystemDir">
			Downloads directory path.
		</constant>
		<constant name="SYSTEM_DIR_MOVIES" value="4" enum="SystemDir">
			Movies directory path.
		</constant>
		<constant name="SYSTEM_DIR_MUSIC" value="5" enum="SystemDir">
			Music directory path.
		</constant>
		<constant name="SYSTEM_DIR_PICTURES" value="6" enum="SystemDir">
			Pictures directory path.
		</constant>
		<constant name="SYSTEM_DIR_RINGTONES" value="7" enum="SystemDir">
			Ringtones directory path.
		</constant>
	</constants>
</class>
