<?xml version="1.0" encoding="UTF-8" ?>
<class name="EditorDebuggerPlugin" inherits="Control" version="4.0">
	<brief_description>
		A base class to implement debugger plugins.
	</brief_description>
	<description>
		All debugger plugin scripts must extend [EditorDebuggerPlugin]. It provides functions related to editor side of debugger.
		You don't need to instantiate this class. That is handled by the debugger itself. [Control] nodes can be added as child nodes to provide a GUI front-end for the plugin.
		Do not queue_free/reparent it's instance otherwise the instance becomes unusable.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="has_capture">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<description>
				Returns [code]true[/code] if a message capture with given name is present otherwise [code]false[/code].
			</description>
		</method>
		<method name="is_breaked">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the game is in break state otherwise [code]false[/code].
			</description>
		</method>
		<method name="is_debuggable">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the game can be debugged otherwise [code]false[/code].
			</description>
		</method>
		<method name="is_session_active">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if there is an instance of  the game running with the attached debugger otherwise [code]false[/code].
			</description>
		</method>
		<method name="register_message_capture">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="callable" type="Callable">
			</argument>
			<description>
				Registers a message capture with given [code]name[/code]. If [code]name[/code] is "my_message" then messages starting with "my_message:" will be called with the given callable.
				Callable must accept a message string and a data array as argument. If the message and data are valid then callable must return [code]true[/code] otherwise [code]false[/code].
			</description>
		</method>
		<method name="send_message">
			<return type="void">
			</return>
			<argument index="0" name="message" type="String">
			</argument>
			<argument index="1" name="data" type="Array">
			</argument>
			<description>
				Sends a message with given [code]message[/code] and [code]data[/code] array.
			</description>
		</method>
		<method name="unregister_message_capture">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<description>
				Unregisters the message capture with given name.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="breaked">
			<argument index="0" name="can_debug" type="bool">
			</argument>
			<description>
				Emitted when the game enters a break state.
			</description>
		</signal>
		<signal name="continued">
			<description>
				Emitted when the game exists a break state.
			</description>
		</signal>
		<signal name="started">
			<description>
				Emitted when the debugging starts.
			</description>
		</signal>
		<signal name="stopped">
			<description>
				Emitted when the debugging stops.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
